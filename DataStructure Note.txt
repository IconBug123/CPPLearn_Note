2025 May 26

1 基础线性结构
① 1 数组（Array）
✅ 1. 本质特性
连续内存块，所有元素紧密排列
下标访问快：支持 O(1) 时间复杂度访问
插入删除慢：中间插入/删除元素需整体移动，O(n)

vector是动态数组

① 2 字符串（String）
✅ 1. 本质特性
实质上是一个 char 数组
C语言用 char str[]，结尾必须 \0
C++ 中提供更强大的 std::string 类，封装了很多操作



② 链表
链表是一种非连续存储的线性结构，由一系列“节点”组成，每个节点存储两个东西：
数据域（存储值）
指针域（指向下一个节点）

list是双向链表


③ 栈
先进后出（LIFO）：Last In, First Out
只能从一端进行操作（栈顶）

stack


④ 队列
先进先出（FIFO）：First In, First Out
一端入（尾），一端出（头）

queue



第二阶段：非线性结构
①树
它由“节点 + 指针”组成
每个节点可以有 0~N 个子节点
最常见的是“二叉树”：每个节点最多有两个子节点

| 类型             | 特点                     | 应用场景             |
| -------------- | ---------------------- | ---------------- |
| 🌲 普通树（多叉树）    | 每个节点有任意个子节点            | 组织结构图、文件系统、菜单树   |
| 🌳 二叉树         | 每个节点最多有两个子节点           | 各类搜索/遍历基础结构      |
| 📈 二叉搜索树（BST）  | 左 < 根 < 右，便于查找         | 数据检索、词典系统        |
| ⚖️ AVL树 / 红黑树  | 自平衡的 BST，保持 O(logN) 性能 | `std::map`、数据库索引 |
| 🔡 Trie 树（前缀树） | 每层代表一个字符               | 字符串匹配、自动补全、字典树   |
| 📦 堆（Heap）     | 最大/最小堆，用数组存储           | 优先队列、TopK问题      |
| 🧮 线段树 / 树状数组  | 区间查询、更新                | 动态统计、游戏血量区间处理    |
| 🌐 B+ 树        | 多叉平衡查找树                | 数据库索引、文件系统       |




map
priority_queue
set



